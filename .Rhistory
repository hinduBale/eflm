y <- ifelse(n == 0, 0, y[, 1] / n)
if (is.null(wt)) {
wt <- rep.int(1, length(y))
}
wt <- wt * n
}
newn <- length(y)
if (newn < oldn) {
warning(sprintf(
ngettext(
newn, "using the %d/%d row from a combined fit",
"using the %d/%d rows from a combined fit"
),
newn, oldn
), domain = NA)
}
} else {
wt <- object$prior.weights
offset <- object$offset
}
n <- nrow(x)
if (is.null(wt)) {
wt <- rep.int(1, n)
}
Terms <- attr(Terms, "term.labels")
asgn <- attr(x, "assign")
ousex <- match(asgn, match(oTerms, Terms), 0L) > 0L
if (int) {
ousex[1L] <- TRUE
}
X <- x[, ousex, drop = FALSE]
z <- boostedglm::bglm.wfit(y, X, , wt, offset = offset, family = object$family)
z <- boostedglm:::bglm.wfit(y, X, , wt, offset = offset, family = object$family)
dfs[1L] <- z$rank
dev[1L] <- z$deviance
r <- z$residuals
w <- z$weights
sTerms <- sapply(strsplit(Terms, ":", fixed = TRUE), function(x) {
paste(sort(x),
collapse = ":"
)
})
for (tt in scope) {
stt <- paste(sort(strsplit(tt, ":")[[1L]]), collapse = ":")
usex <- match(asgn, match(stt, sTerms), 0L) > 0L
X <- x[, usex | ousex, drop = FALSE]
z <- boostedglm:::bglm.wfit(y, X, , wt, offset = offset, family = object$family)
dfs[tt] <- z$rank
dev[tt] <- z$deviance
if (test == "Rao") {
zz <- bglm.wfit(r, X, , w, offset = offset)
score[tt] <- zz$null.deviance - zz$deviance
}
}
if (scale == 0) {
dispersion <- summary(object, dispersion = NULL)$dispersion
} else {
dispersion <- scale
}
fam <- object$family$family
if (fam == "gaussian") {
if (scale > 0) {
loglik <- dev / scale - n
} else {
loglik <- n * log(dev / n)
}
} else {
loglik <- dev / dispersion
}
aic <- loglik + k * dfs
aic <- aic + (extractAIC(object, k = k)[2L] - aic[1L])
dfs <- dfs - dfs[1L]
dfs[1L] <- NA
aod <- data.frame(
Df = dfs, Deviance = dev, AIC = aic, row.names = names(dfs),
check.names = FALSE
)
aod
aic
if (all(is.na(aic))) {
aod <- aod[, -3]
}
if (test == "LRT") {
dev <- pmax(0, loglik[1L] - loglik)
dev[1L] <- NA
LRT <- if (dispersion == 1) {
"LRT"
} else {
"scaled dev."
}
aod[, LRT] <- dev
nas <- !is.na(dev)
dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail = FALSE)
aod[, "Pr(>Chi)"] <- dev
} else if (test == "Rao") {
dev <- pmax(0, score)
dev[1L] <- NA
nas <- !is.na(dev)
SC <- if (dispersion == 1) {
"Rao score"
} else {
"scaled Rao sc."
}
dev <- dev / dispersion
aod[, SC] <- dev
dev[nas] <- safe_pchisq(dev[nas], aod$Df[nas], lower.tail = FALSE)
aod[, "Pr(>Chi)"] <- dev
} else if (test == "F") {
if (fam == "binomial" || fam == "poisson") {
warning(gettextf(
"F test assumes quasi%s family",
fam
), domain = NA)
}
rdf <- object$df.residual
aod[, c("F value", "Pr(>F)")] <- Fstat(aod, rdf)
}
head <- c(
"Single term additions", "\nModel:", deparse(formula(object)),
if (scale > 0) paste("\nscale: ", format(scale), "\n")
)
class(aod) <- c("anova", "data.frame")
head
attr(aod, "heading") <- head
aod
aod$Df
library(boostedglm)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
expect_equal(add_m1$Df, add_m2$Df)
add_m1$Df
add_m2$Df
add_m2
library(boostedglm)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
boostedglm:::add1.bglm(m2)
add_m2 <- add1(m2, ~ . +  am)
add_m2
boostedglm:::add1.bglm(m2, ~ . + am)
class(m2)
remove.packages("boostedglm")
library(boostedglm)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
add_m2
expect_equal(add_m1$Df, add_m2$Df)
expect_equal(add_m1$Deviance, add_m2$Deviance)
expect_equal(add_m1$AIC, add_m2$AIC)
devtools::check()
library(usethis)
use_r("cp")
library(boostedglm)
devtools::test()
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
devtools::test()
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
devtools::test()
length(scope)
devtools::test()
library(boostedglm)
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
devtools::test()
use_r("extract-aic")
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
library(boostedglm)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
se.fit = FALSE
interval = "Chisq"
se.fit || interval != "none"
interval = c("none", "confidence", "prediction")
interval
interval %in% "none"
all(interval %in% "none")
!all(interval %in% "none")
se.fit || !all(interval %in% "none")
FALSE || FALSE
interval
all(!interval %in% "none")
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
devtools::test()
library(boostedglm)
devtools::test()
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
library(boostedglm)
m1 <- glm(mpg ~ wt, data = mtcars, family = gaussian())
add_m1 <- add1(m1, ~ . + am)
m2 <- bglm(mpg ~ wt, data = mtcars, family = gaussian())
add_m2 <- add1(m2, ~ . +  am)
expect_equal(add_m1$Df, add_m2$Df)
expect_equal(add_m1$Deviance, add_m2$Deviance)
expect_equal(add_m1$AIC, add_m2$AIC)
Sys.setenv("_R_CHECK_LENGTH_1_LOGIC2_"="true")
devtools::test()
library(boostedglm)
library(boostedglm)
library(boostedglm)
library(boostedglm)
m1 <- lm(mpg ~ wt + am, data = mtcars)
m2 <- blm(mpg ~ wt + am, data = mtcars)
expect_equal(m1$coefficients, m2$coefficients)
library(testthat)
expect_equal(m1$coefficients, m2$coefficients)
expect_equal(m1$coefficients, m2$coefficients)
expect_equal(m1$residuals, m2$residuals)
expect_equal(m1$fitted.values, m2$fitted.values)
expect_equal(m1$rank, m2$rank)
expect_equal(m1$df.residual, m2$df.residual)
expect_equal(m1$call$formula, m2$call$formula)
expect_equal(m1$call$data, m2$call$data)
expect_equal(m1$terms, m2$terms)
expect_equal(m1$model, m2$model)
expect_equal(
predict(m1, newdata = mtcars, type = "response"),
predict(m2, newdata = mtcars, type = "response")
)
m1 <- lm(mpg ~ wt + am, data = mtcars)
m2 <- blm(mpg ~ wt + am, data = mtcars, singularity.method = "qr")
expect_equal(m1$coefficients, m2$coefficients)
expect_equal(m1$residuals, m2$residuals)
expect_equal(m1$fitted.values, m2$fitted.values)
expect_equal(m1$rank, m2$rank)
expect_equal(m1$df.residual, m2$df.residual)
expect_equal(m1$call$formula, m2$call$formula)
expect_equal(m1$call$data, m2$call$data)
expect_equal(m1$terms, m2$terms)
expect_equal(m1$model, m2$model)
expect_equal(
predict(m1, newdata = mtcars, type = "response"),
predict(m2, newdata = mtcars, type = "response")
)
m1 <- lm(mpg ~ wt + am, data = mtcars)
m2 <- blm(mpg ~ wt + am, data = mtcars, singularity.method = "Cholesky")
expect_equal(m1$coefficients, m2$coefficients)
expect_equal(m1$residuals, m2$residuals)
expect_equal(m1$fitted.values, m2$fitted.values)
expect_equal(m1$rank, m2$rank)
expect_equal(m1$df.residual, m2$df.residual)
expect_equal(m1$call$formula, m2$call$formula)
expect_equal(m1$call$data, m2$call$data)
expect_equal(m1$terms, m2$terms)
expect_equal(m1$model, m2$model)
expect_equal(
predict(m1, newdata = mtcars, type = "response"),
predict(m2, newdata = mtcars, type = "response")
)
m1 <- blm(mpg ~ wt, data = mtcars, x = TRUE)
m2 <- lm(mpg ~ wt, data = mtcars, x = TRUE)
expect_equal(m1$x, m2$x)
m1 <- summary(lm(mpg ~ wt, data = mtcars))
m2 <- summary(flm(mpg ~ wt, data = mtcars))
em1 <- round(as.data.frame(m1$coefficients), 4)
em2 <- as.data.frame(m2$coefficients)
em2$`Pr(>|t|)` <- as.numeric(em2$`Pr(>|t|)`)
em2 <- round(em2, 4)
expect_equal(m1$call$formula, m2$call$formula)
expect_equal(m1$call$data, m2$call$data)
expect_equal(m1$terms, m2$terms)
expect_equal(m1$family, m2$family)
expect_equal(m1$deviance, m2$deviance)
expect_equal(m1$aic, m2$aic)
expect_equal(m1$cov.unscaled, m2$cov.unscaled)
expect_equal(em1$Estimate, em2$Estimate)
expect_equal(em1$`Std. Error`, em2$`Std. Error`)
expect_equal(em1$`t value`, em2$`t value`)
expect_equal(em1$`Pr(>|t|)`, em2$`Pr(>|t|)`)
m1
m2
library(boostedglm)
library(boostedglm)
m1 <- summary(glm(mpg ~ wt, family = gaussian(), data = mtcars))
m2 <- summary(bglm(mpg ~ wt, family = gaussian(), data = mtcars))
m2
library(boostedglm)
library(boostedglm)
devtools::test_coverage()
library(boostedglm)
devtools::test_coverage()
devtools::check()
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
m1 <- lm(mpg ~ wt + am, data = mtcars)
m2 <- blm(mpg ~ wt + am, data = mtcars, singularity.method = "qr")
library(boostedglm)
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
library(boostedglm)
devtools::check()
devtools::check()
library(boostedglm)
library(boostedglm)
library(boostedglm)
devtools::check()
library(boostedglm)
library(boostedglm)
library(boostedglm)
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
vcov_m1 <- sandwich::vcovHC(m1, cluster = NULL)
vcov_m2 <- sandwich::vcovHC(m2, cluster = NULL)
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
vcov_m1 <- sandwich::vcovBS(m1, cluster = NULL)
vcov_m2 <- sandwich::vcovBS(m2, cluster = NULL)
expect_equal(vcov_m1, vcov_m2)
library(testthat)
expect_equal(vcov_m1, vcov_m2)
vcov_m1
vcov_m2
library(sandwich)
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
vcov_m1 <- sandwich::vcovHC(m1, cluster = NULL)
vcov_m2 <- sandwich::vcovHC(m2, cluster = NULL)
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
vcov_m1 <- sandwich::vcovHC(m1, cluster = NULL)
vcov_m2 <- sandwich::vcovHC(m2, cluster = NULL)
x = m2
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
vcov_m1 <- sandwich::vcovHC(m1, cluster = NULL)
vcov_m2 <- sandwich::vcovHC(m2, cluster = NULL)
vcov_m1
vcov_m2
vcov_m2 <- sandwich::vcovHC(m2, cluster = NULL)
xx = m2
x = m2
type = "const"
omega = NULL
if (is.list(x) && !is.null(x$na.action))
class(x$na.action) <- "omit"
X <- model.matrix(x)
if (any(alias <- is.na(coef(x))))
X <- X[, !alias, drop = FALSE]
attr(X, "assign") <- NULL
n <- NROW(X)
diaghat <- try(hatvalues(x), silent = TRUE)
df <- n - NCOL(X)
ef <- estfun(x, ...)
res <- rowMeans(ef/X, na.rm = TRUE)
res[apply(abs(ef) < .Machine$double.eps, 1L, all)] <- 0
if (is.null(omega)) {
type <- match.arg(type)
if (type == "HC")
type <- "HC0"
switch(type, const = {
omega <- function(residuals, diaghat, df) rep(1,
length(residuals)) * sum(residuals^2)/df
}, HC0 = {
omega <- function(residuals, diaghat, df) residuals^2
}, HC1 = {
omega <- function(residuals, diaghat, df) residuals^2 *
length(residuals)/df
}, HC2 = {
omega <- function(residuals, diaghat, df) residuals^2/(1 -
diaghat)
}, HC3 = {
omega <- function(residuals, diaghat, df) residuals^2/(1 -
diaghat)^2
}, HC4 = {
omega <- function(residuals, diaghat, df) {
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(4, n * diaghat/p)
residuals^2/(1 - diaghat)^delta
}
}, HC4m = {
omega <- function(residuals, diaghat, df) {
gamma <- c(1, 1.5)
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(gamma[1], n * diaghat/p) + pmin(gamma[2],
n * diaghat/p)
residuals^2/(1 - diaghat)^delta
}
}, HC5 = {
omega <- function(residuals, diaghat, df) {
k <- 0.7
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(n * diaghat/p, pmax(4, n * k *
max(diaghat)/p))
residuals^2/sqrt((1 - diaghat)^delta)
}
})
}
if (is.function(omega))
omega <- omega(res, diaghat, df)
rval <- sqrt(omega) * X
rval <- crossprod(rval)/n
# Dynamically exported, see zzz.R
meatHC.bglm <- function (x, type = c("HC3", "const", "HC", "HC0", "HC1", "HC2",
"HC4", "HC4m", "HC5"), omega = NULL, ...) {
if (is.list(x) && !is.null(x$na.action))
class(x$na.action) <- "omit"
X <- model.matrix(x)
if (any(alias <- is.na(coef(x))))
X <- X[, !alias, drop = FALSE]
attr(X, "assign") <- NULL
n <- NROW(X)
diaghat <- try(hatvalues(x), silent = TRUE)
df <- n - NCOL(X)
ef <- estfun(x, ...)
res <- rowMeans(ef/X, na.rm = TRUE)
res[apply(abs(ef) < .Machine$double.eps, 1L, all)] <- 0
if (is.null(omega)) {
type <- match.arg(type)
if (type == "HC")
type <- "HC0"
switch(type, const = {
omega <- function(residuals, diaghat, df) rep(1,
length(residuals)) * sum(residuals^2)/df
}, HC0 = {
omega <- function(residuals, diaghat, df) residuals^2
}, HC1 = {
omega <- function(residuals, diaghat, df) residuals^2 *
length(residuals)/df
}, HC2 = {
omega <- function(residuals, diaghat, df) residuals^2/(1 -
diaghat)
}, HC3 = {
omega <- function(residuals, diaghat, df) residuals^2/(1 -
diaghat)^2
}, HC4 = {
omega <- function(residuals, diaghat, df) {
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(4, n * diaghat/p)
residuals^2/(1 - diaghat)^delta
}
}, HC4m = {
omega <- function(residuals, diaghat, df) {
gamma <- c(1, 1.5)
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(gamma[1], n * diaghat/p) + pmin(gamma[2],
n * diaghat/p)
residuals^2/(1 - diaghat)^delta
}
}, HC5 = {
omega <- function(residuals, diaghat, df) {
k <- 0.7
n <- length(residuals)
p <- as.integer(round(sum(diaghat), digits = 0))
delta <- pmin(n * diaghat/p, pmax(4, n * k *
max(diaghat)/p))
residuals^2/sqrt((1 - diaghat)^delta)
}
})
}
if (is.function(omega))
omega <- omega(res, diaghat, df)
rval <- sqrt(omega) * X
rval <- crossprod(rval)/n
return(rval)
}
meatHC.bglm(m2, "const")
vcov_m1
library(sandwich)
library(boostedglm)
library(boostedglm)
library(boostedglm)
library(boostedglm)
llibrary(censo2017)
library(censo2017)
library(boostedglm)
m1 <- glm(mpg ~ wt, family = gaussian(), data = mtcars)
m2 <- bglm(mpg ~ wt, family = gaussian(), data = mtcars)
class(bglm)
class(m2)
class(m1)
library(boostedglm)
library(boostedglm)
library(boostedglm)
library(boostedglm)
aa = predict(m2)
class(aa)
aa = summary(m2)
library(boostedglm)
pkgdown::build_site()
library(boostedglm)
