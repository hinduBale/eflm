benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("elm", benchmark$expression), "ELM", "LM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time (log-log scale)",
x = "Number of Observations",
y = "Fitting Time")
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation (log-log scale)",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ols)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("elm", benchmark$expression), "ELM", "LM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time")
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
data(trade_data_yotov_benchmark)
trade_data_yotov_benchmark
names(trade_data_yotov_benchmark)
names(trade_data_yotov_benchmark) <- c(
"ols","ppml"
)
names(trade_data_yotov_benchmark)
usethis::use_data(trade_data_yotov_benchmark, compress = "xz", overwrite = T)
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("elm", benchmark$expression), "ELM", "LM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time")
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time")
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
library(eflm)
library(ggplot2)
library(patchwork)
library(readxl)
library(dplyr)
library(tidyr)
library(wesanderson)
library(forcats)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
tidy_benchmarks <- read_excel("dev/tidy benchmarks.xlsx")
tidy_benchmarks %>%
select(-expr, -neval) %>%
gather(Statistic, `Time (Seconds)`, -Hardware, -Function) %>%
mutate(
Statistic = as_factor(Statistic),
Statistic = fct_relevel(Statistic, "Min", "LQ", "Median",
"Mean", "UQ", "Max")
) %>%
ggplot() +
geom_col(aes(x = Function, y = `Time (Seconds)`, fill = Hardware), position = "dodge2") +
facet_wrap(~Statistic) +
scale_fill_manual(values = wes_palette("Zissou1")) +
labs(title = "Benchmarking Time on DigitalOcean Droplets") +
theme_minimal(base_size = 14)
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_fill_manual(values = wes_palette("Zissou1"))
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1"))
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
wes_palette("Zissou1")
wes_palette("Zissou1")
wes_palette("Zissou1")[1,5]
wes_palette("Zissou1")[1,5,]
wes_palette("Zissou1")[c(1,5)]
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,5])
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,5)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation")
g1 | g2
wes_palette("Zissou1")
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g1 | g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g1 | g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes() +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g1 / g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g1 / g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)]) +
expand_limits(x = 0, y = 0)
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)]) +
expand_limits(x = 0, y = 0)
g1 / g2
benchmark <- do.call("rbind", trade_data_yotov_benchmark$ppml)
benchmark$dimensions <- benchmark$mm_rows * benchmark$mm_cols
benchmark$expression2 <- ifelse(grepl("eglm", benchmark$expression), "EGLM", "GLM")
g1 <- ggplot(benchmark, aes(x = dimensions, y = median, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_time(NULL, expand = c(0,0)) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
# coord_fixed() +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Fitting Time",
x = "Number of Observations",
y = "Fitting Time") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g2 <- ggplot(benchmark, aes(x = dimensions, y = mem_alloc, color = expression2)) +
geom_point() +
geom_line() +
bench::scale_y_bench_bytes(NULL) +
scale_x_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank()) +
labs(title = "Observations vs Memory Allocation",
x = "Number of Observations",
y = "Memory Allocation") +
scale_color_manual(values = wes_palette("Zissou1")[c(1,4)])
g1 / g2
pkgdown::build_site()
library(eflm)
library(eflm)
View(trade_data_yotov_benchmark$ppml)
View(do.call("rbind", trade_data_yotov_benchmark$ppml))
